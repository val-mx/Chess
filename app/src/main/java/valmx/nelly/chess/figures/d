
    /**
     * public static MoveInfo getBestPossibleMove(Figure[][] pieces, int depth, MoveInfo lastMove) {
     * <p>
     * if (depth == 4) return null;
     * Figure[][] board = copyArray(pieces);
     * <p>
     * LinkedList<MoveInfo> allPossibleMoves = getAllPossibleMoves(board, 0);
     * <p>
     * allPossibleMoves.forEach(m -> {
     * <p>
     * if (m.getAction() == MoveInfo.Action.ROCHADE_LEFT || m.getAction() == MoveInfo.Action.ROCHADE_RIGHT)
     * return;
     * if (m.getAction() == MoveInfo.Action.ENPASSANT) return;
     * if (m.getAction() == MoveInfo.Action.POSSIBLEPAWNCAPTURE) return;
     * <p>
     * Figure[][] recursionBoard = pieces;
     * <p>
     * Figure fig = m.getActor();
     * <p>
     * int y = fig.getY();
     * int x = fig.getX();
     * recursionBoard[x][y] = null;
     * final Figure cachedFig = recursionBoard[m.getX()][m.getY()];
     * <p>
     * //            if (m.getX() == 8)
     * //                recursionBoard[m.getX() - 1][m.getY() - 1] = fig.copy();
     * //
     * //            else if (m.getX() == -1)
     * //                recursionBoard[m.getX() + 1][m.getY() + 1] = fig.copy();
     * //
     * //            else
     * recursionBoard[m.getX()][m.getY()] = fig.copy();
     * m.setWorth(getWortSum(recursionBoard));
     * recursionBoard[m.getX()][m.getY()] = cachedFig;
     * recursionBoard[x][y] = fig;
     * });
     * <p>
     * MoveInfo maxMoveInfo = null;
     * <p>
     * for (MoveInfo m : allPossibleMoves) {
     * <p>
     * Figure[][] recursionBoard = copyArray(pieces);
     * Figure a = m.getActor().copy();
     * <p>
     * <p>
     * recursionBoard[a.getX()][a.getY()] = null;
     * try {
     * <p>
     * recursionBoard[m.getX()][m.getY()] = a;
     * } catch (Exception e) {
     * Log.i("CRASH", a.toString());
     * recursionBoard[m.getX()][m.getY()] = a;
     * <p>
     * }
     * a.setX(m.getX());
     * a.setY(m.getY());
     * <p>
     * <p>
     * MoveInfo bestPossibleMove = getBestPossibleMove(recursionBoard, depth + 1, m);
     * if (bestPossibleMove != null) {
     * m.setWorth((bestPossibleMove.getWorth()));
     * m.chachedWoth = bestPossibleMove.getWorth();
     * }
     * <p>
     * }
     * <p>
     * <p>
     * for (MoveInfo m : allPossibleMoves) {
     * if (maxMoveInfo == null) {
     * <p>
     * lastMove = m;
     * maxMoveInfo = m;
     * } else {
     * <p>
     * if (depth % 2 == 0) {
     * if (m.getWorth() <= lastMove.getWorth()) maxMoveInfo = m;
     * <p>
     * } else {
     * if (m.getWorth() > lastMove.getWorth()) maxMoveInfo = m;
     * <p>
     * }
     * <p>
     * }
     * <p>
     * }
     * <p>
     * return maxMoveInfo;
     * }
     */
